Instead of writing:
User.findOne().exec().then(result => result.password)
you can just use async await to store the user in a constant like
const user = await User.findOne()
user.password // Access the user information

==============================================================

use res.header('key', value).send('something') to set a header for the response

==============================================================

For validating information, like signup page, my choice is to make put it in a middleware so the payload will not reach my controller unluss it pass the validation. Which is better for performance. And is earlier than the "DB Schema".

==============================================================

Mongoose Schema Types can take a validate(v) => v function

==============================================================

Tools to use in the next episode:
- express-validator
- mongoose-autopopulate

==============================================================

.then()
.then()
.catch()

to handle multiple promises

==============================================================
